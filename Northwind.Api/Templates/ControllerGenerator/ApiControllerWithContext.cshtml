@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNet.OData;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using URF.Core.Abstractions;
using URF.Core.Abstractions.Services;
using URF.Core.Abstractions.Trackable;
using URF.Core.Services;

@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
    var serviceType = Model.ModelTypeName + "Service";
    var serviceInterfaceType = "I" + serviceType;
    var serviceVariable = "_" + Model.ModelVariable + "Service";
}
    public class @Model.ControllerName : ODataController
    {
        private readonly @(serviceInterfaceType) @(serviceVariable);
        private readonly IUnitOfWork _unitOfWork;

        public @(Model.ControllerName)(
            @serviceInterfaceType @(Model.ModelVariable)Service,
            IUnitOfWork unitOfWork
        )
        {
            @(serviceVariable) = @(Model.ModelVariable)Service;
            _unitOfWork = unitOfWork;
        }

        // GET: @routePrefix
        [EnableQuery]
        public IEnumerable<@Model.ModelTypeName> Get()
        {
            return @(serviceVariable).Queryable();
        }

        public async Task<IActionResult> Get([FromODataUri] @primaryKeyShortTypeName key)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var @Model.ModelVariable = await @(serviceVariable).FindAsync(key);

            if (@Model.ModelVariable == null)
                return NotFound();

            return Ok(@Model.ModelVariable);
        }

        public async Task<IActionResult> Put([FromODataUri] @primaryKeyShortTypeName key, [FromBody] @Model.ModelTypeName @Model.ModelVariable)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            if (key != @(Model.ModelVariable).@primaryKeyName)
                return BadRequest();
            
            @(serviceVariable).Update(@Model.ModelVariable);

            try
            {
                await _unitOfWork.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await @(serviceVariable).ExistsAsync(key))
                    return NotFound();
                throw;
            }

            return NoContent();
        }

        public async Task<IActionResult> Post([FromBody] @Model.ModelTypeName @Model.ModelVariable)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            @(serviceVariable).Insert(@Model.ModelVariable);

@{
    if (primaryKeyIsAutoGenerated)
    {
            @:await _unitOfWork.SaveChangesAsync();
    }
    else
    {
            @:try
            @:{
                @:await _unitOfWork.SaveChangesAsync();
            @:}
            @:catch (DbUpdateException)
            @:{
                @:if (@(Model.ModelTypeName)Exists(@(Model.ModelVariable).@primaryKeyName))
                @:{
                    @:return new StatusCodeResult(StatusCodes.Status409Conflict);
                @:}
                @:else
                @:{
                    @:throw;
                @:}
            @:}
    }
}
            return CreatedAtAction("Get", new { key = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
        }

        [AcceptVerbs("PATCH", "MERGE")]
        public async Task<IActionResult> Patch([FromODataUri] @primaryKeyShortTypeName key, [FromBody] Delta<@Model.ModelTypeName> @Model.ModelVariable)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var entity = await @(serviceVariable).FindAsync(key);
            if (entity == null)
                return NotFound();

            @(@Model.ModelVariable).Patch(entity);
            @(serviceVariable).Update(entity);

            try
            {
                await _unitOfWork.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await @(serviceVariable).ExistsAsync(key))
                    return NotFound();
                throw;
            }

            return Updated(entity);
        }

        public async Task<IActionResult> Delete([FromODataUri] @primaryKeyShortTypeName key)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var result = await @(serviceVariable).DeleteAsync(key);

            if (!result)
                return NotFound();

            await _unitOfWork.SaveChangesAsync();

            return Ok();
        }
    }
}

public interface @(serviceInterfaceType) : IService<@Model.ModelTypeName>
{
}

public class @serviceType : Service<@Model.ModelTypeName>, @serviceInterfaceType
{
    public @(serviceType)(ITrackableRepository<@Model.ModelTypeName> repository) : base(repository)
    {
    }
}

// Copy below to Startup.cs
// 
// Depedency Injection Registration & Bindings, copy into method body of ConfigurationServices(IServiceCollection services)
// services.AddScoped<ITrackableRepository<@Model.ModelTypeName>, TrackableRepository<@Model.ModelTypeName>>();
// services.AddScoped<@(serviceInterfaceType), @(serviceType)>();
// 
// OData Model Configruation, copy into method body of Configure(IApplicationBuilder app, IHostingEnvironment env)
// var @(@Model.ModelVariable)EntitySetConfiguration = oDataConventionModelBuilder.EntitySet<@Model.ModelTypeName>(nameof(@Model.ModelTypeName));
// @(@Model.ModelVariable)EntitySetConfiguration.EntityType.HasKey(x => x.@primaryKeyName);